generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Type {
  Problem
  POST
  COMMENT
}

enum voteType {
  LIKE
  DISLIKE
}

enum Status {
  BEGIN
  ONGOING
  STUCK
  FINISH
}

enum UserRole {
  USER
  COADMIN
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  username      String?         @unique
  image         String?
  role          UserRole        @default(USER)
  posts         Post[]
  sessions      Session[]
  Comment       Comment[]
  votes         Vote[]
  bookmarks     Bookmark[]
  submissions   Submissions[]
  problemStatus problemStatus[]
  accounts      Account[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  course    String
  comments  Comment[]
  Vote      Vote[]

  @@index([authorId])
}

model Comment {
  id        String    @id @default(cuid())
  content   Json
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @unique
  type      Type
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?   @unique
  problem   Problem?  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int?   @unique
  replyToId String?   @unique
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
  commentId String?
  votes     Vote[]
}

model Problem {
  id            Int             @id @default(autoincrement())
  course        String
  chapter       String
  title         String
  img           String
  difficulty    String
  solution      Solution?
  comments      Comment[]
  Submissions   Submissions[]
  problemStatus problemStatus[]
  vote          Vote[]
  bookmarks     Bookmark[]

  @@unique([course, chapter, title])
}

model Solution {
  id        String   @id @default(cuid())
  problemId Int      @unique
  problem   Problem  @relation(fields: [problemId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videoUrl  String?
  content   Json
}

model Submissions {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  problemId Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean

  @@index([userId])
  @@index([problemId])
}

model Vote {
  id        String   @id @default(cuid())
  type      voteType
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  problemId Int?  @unique
  problem   Problem? @relation(fields: [problemId], references: [id])
  postId    String?  @unique
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @unique
}

model Bookmark {
  id        String   @id @default(cuid())
  type      Type
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  problemId Int?  @unique
  problem   Problem? @relation(fields: [problemId], references: [id])
}

model problemStatus {
  problemId Int  @unique
  problem   Problem @relation(fields: [problemId], references: [id])
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  status    Status  @default(BEGIN)
}
